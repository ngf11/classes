const person = {
  firstName: "nico",
  lastName: "Fuentes",
  skill: "Web Developer",
  hobbies: ["Learning", "reading"],
  get fullName() {
    return `${this.firstName} ${this.lastName}. Is ${this.age} years ols `;
  },
  set fullName(value) {
    const parts = value.split(" ");
    this.firstName = parts[0];
    this.lastName = parts[1];
  },
};
person.fullName = "DiDi Wu";
console.log(person.fullName);
const person = {
  name: "nico",
  skill: "Web Developer",
  hobbies: ["Learning", "reading"],
  get headlines() {
    return `${this.name}  is ${this.skill} and his main hobbies are ${this.hobbies[0]} and ${this.hobbies[1]}`;
  },
  set newHobby(val) {
    this.hobbies.unshift(val);
  },
  get newHobby() {
    return this.hobbies[0];
  },
};
person.newHobby = "Druming";
console.log(person.headlines);
class Person {
  constructor(name) {
    this.name = name;
  }

  set name(value) {
    this._name = value;
  }

  get name() {
    return this._name.toUpperCaser();
  }
}

const nico = new Person("nico");
// console.log(nico);

console.log(nico);

let user = {
  get name() {
    return this._name;
  },

  set name(value) {
    if (value.length < 4) {
      alert("Name is too short, need at least 4 characters");
      return;
    }
    this._name = value;
  }
};

user.name = "Pete";
alert(user.name); // Pete

user.name = ""; // Name is too short...


function User(name, birthday) {
  this.name = name;
  this.birthday = birthday;

  // age is calculated from the current date and birthday
  Object.defineProperty(this, "age", {
    get() {
      let todayYear = new Date().getFullYear();
      return todayYear - this.birthday.getFullYear();
    }
  });
}

let john = new User("John", new Date(1992, 6, 1));

alert( john.birthday ); // birthday is available
alert( john.age );      // ...as well as the age
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  intro() {
    return `Hi my name is ${this.name}, I Am ${this.age} years old`;
  }
}

const nico = new Person("nico", 34);
console.log(nico.intro());
console.log(Person.prototype);
console.log("-----");
console.log(typeof Person);
console.log("-----");
console.log(Person === Person.prototype.constructor);
console.log("-----");
console.log(Person.prototype.sayHi);
console.log("-----");
console.log(Object.getOwnPropertyNames(Person.prototype));
// Class Expression
// let User = class {
//   sayHi() {
//     console.log("high");
//   }
// };
let User = class Myclass {
  sayHi() {
    console.log("Hi");
  }
};

new User().sayHi();
// console.log(Myclass); Erro is not a variable you cant call it

//make classes dynamically “on-demand”
function makeClass(phrase) {
  return class {
    sayPhrase() {
      console.log(phrase);
    }
  };
}

const nico = makeClass("Gordo Puto");

new nico().sayPhrase();
class User {
  constructor(name) {
    this.name = name;
  }
  get name() {
    return ` Hi ${this._name}`;
  }

  set name(value) {
    if (value.length < 4) {
      return `This name is is too short`;
    }
    this._name = value;
  }
}
let user = new User("nico");
console.log(user.name);
class User {
  name = "John";

  sayHi() {
    console.log(`Hello, ${this.name}!`);
  }
}

new User().sayHi();

class Button {
  constructor(value) {
    this.value = value;
  }
  click = () => {
    console.log(this.value);
  };
}

let button = new Button("hello");

setTimeout(button.click, 1000);

click("nico").call();

class Clock {
  constructor({ template }) {
    this.template = template;
  }
  render() {
    let date = new Date();

    let hours = date.getHours();
    if (hours < 10) hours = "0" + hours;

    let mins = date.getMinutes();
    if (mins < 10) mins = "0" + mins;

    let secs = date.getSeconds();
    if (secs < 10) secs = "0" + secs;

    let output = template
      .replace("h", hours)
      .replace("m", mins)
      .replace("s", secs);

    console.log(output);
  }
  render() {
    let date = new Date();

    let hours = date.getHours();
    if (hours < 10) hours = "0" + hours;

    let mins = date.getMinutes();
    if (mins < 10) mins = "0" + mins;

    let secs = date.getSeconds();
    if (secs < 10) secs = "0" + secs;

    let output = this.template
      .replace("h", hours)
      .replace("m", mins)
      .replace("s", secs);

    console.log(output);
  }
  stop() {
    clearInterval(this.timer);
  }

  start() {
    this.render();
    this.timer = setInterval(() => this.render(), 1000);
  }
}

let clock = new Clock({ template: "h:m:s" });
clock.start();          
const person = {
  name: "Nico",
  skill: "Developer",
  interest: ["fitness", "3D Animation"],
  get intro() {
    console.log(
      `Hi, my name is ${this.name}. I am a ${this.skill}. My interest are: ${this.getPrieryInterst}`
    );
  },
  set setInterest(val) {
    this.interest.unshift(val);
  },
  set newName(val) {
    if (this.name <= 4) {
      throw new Error("This name is to0 short");
    } else {
      this.name = val;
    }
  },
  set setSkill(val) {
    this.skill = val;
  },
  get getPrieryInterst() {
    for (const hobbies of this.interest) {
      return hobbies;
    }
  },
};
person.intro;
person.newName = "DiDi";
person.setSkill = "Astronaut";
person.setInterest = "Space travel";
person.setInterest = "Playing Futbol";
console.log("-------");
person.intro;
class Person {
  constructor(name, skill, hobbies) {
    this.name = name;
    this.skill = skill;
    this.hobbies = hobbies;
  }
  get intro() {
    return `hi my name is ${this.name}. I am ${this.skill}, I am interested in ${this.primeryInterest}`;
  }
  set name(val) {
    this._name = val;
  }

  get name() {
    return this._name.toUpperCase();
  }
}

const nico = new Person("nico", "Developer", ["Fitness", "Tech"]);

console.log(nico.intro);
//Parent class super class
class Pizza {
  constructor(pizzaSize) {
    this.size = pizzaSize;
    this.crust = "Orinal";
  }
  get pizzaCrust() {
    return this.crust;
  }

  set pizzaCrust(val) {
    this.crust = val;
  }
}

class SpecialtyPizza extends Pizza {
  constructor(pizzaSize) {
    super(pizzaSize);
    this.type = this.type; // "The Works"
  }
  getTypeOfPizza() {
    console.log(this.type);
  }
  setTypeOfPizza(val) {
    this.type = val;
  }
  slice() {
    console.log(`Our ${this.type} ${this.size} pizza has 8 slices `);
  }
}

const myPizza = new SpecialtyPizza("Lagre");
myPizza.setTypeOfPizza("The Works");

myPizza.slice();
//Factory funtion
function pizzaFuctory(size) {
  const pizzaCrust = "Orginal";
  const pizzaSize = size;
  return {
    bake: () => {
      console.log(`Your order ${pizzaSize}, ${pizzaCrust} pizza`);
    },
  };
}

const myPizza = pizzaFuctory("Large");
myPizza.bake();
// Parent class super class
class Pizza {
  crust = "Orinal";
  #sauce = "Traditional";
  #size;
  constructor(pizzaSize) {
    this.#size = pizzaSize;
  }
  get pizzaCrust() {
    return this.crust;
  }

  set pizzaCrust(val) {
    this.crust = val;
  }
  order() {
    console.log(
      `Your order ${this.#size}, ${this.crust}, with ${this.#sauce} pizza`
    );
  }
}

const myPizza = new Pizza("large");
myPizza.pizzaCrust = "thin";
myPizza.order();
const obj = {
  greet: "Hi",
  name: "nico",
  get fullname() {
    return `${this.greet} ${this.name}`;
  },
  set fullname(name) {
    this.name = name;
  },
};

console.log(obj);
console.log(obj.fullname);
obj.fullname = "Didi";
console.log(obj.fullname);

const user = {
  firstname: "nico",
  lastname: "fuentes",
  get fullname() {
    return `${this.firstname} ${this.lastname}`;
  },
  set fullname(value) {
    [this.firstname, this.lastname] = value.split(" ");
  },
};

console.log(user);
console.log(user.fullname);
user.fullname = "Didi Wu";
console.log(user.fullname);
console.log(user.firstname);
console.log(user.lastname);

const users = {
  firstname: "siggy",
  lastname: "siggy",
  get fullname() {
    return `${this.firstname} ${this.lastname}`;
  },
  set fullname(value) {
    [this.firstname, this.lastname] = value.split(" ");
  },
};

Object.defineProperty(users, "fullname", {
  get() {
    return `${this.firstname} ${this.lastname}`;
  },
  set(value) {
    [this.firstname, this.lastname] = value.split(" ");
  },
});

console.log(users);
console.log(users.fullname);
users.fullname = "Didi Wu";
console.log(users.fullname);
console.log(users.firstname);
console.log(users.lastname);
class Clock {
  constructor({ template }) {
    this.template = template;
  }

  render() {
    let date = new Date();

    let hours = date.getHours();
    if (hours < 10) hours = "0" + hours;

    let mins = date.getMinutes();
    if (mins < 10) mins = "0" + mins;

    let secs = date.getSeconds();
    if (secs < 10) secs = "0" + secs;

    let output = this.template
      .replace("h", hours)
      .replace("m", mins)
      .replace("s", secs);

    console.log(output);
  }

  stop() {
    clearInterval(this.timer);
  }

  start() {
    this.render();
    this.timer = setInterval(() => this.render(), 1000);
  }
}

let clock = new Clock({ template: "h:m:s" });
clock.start();
class Pizza {
  constructor(size, topping) {
    this.size = size;
    this.topping = topping;
    this.crust = "Orignal";
  }
  getPizza() {
    console.log(
      `You order a ${this.size}, ${this.topping} pizza with ${this.crust} crust`
    );
  }
  setCrust(value) {
    this.crust = value;
  }
}

const myPie = new Pizza("Large", "Pepperoni");
console.log(myPie.getPizza());
myPie.setCrust("Thin");
console.log(myPie.getPizza());