const person = {
  firstName: "nico",
  lastName: "Fuentes",
  skill: "Web Developer",
  hobbies: ["Learning", "reading"],
  get fullName() {
    return `${this.firstName} ${this.lastName}. Is ${this.age} years ols `;
  },
  set fullName(value) {
    const parts = value.split(" ");
    this.firstName = parts[0];
    this.lastName = parts[1];
  },
};
person.fullName = "DiDi Wu";
console.log(person.fullName);
const person = {
  name: "nico",
  skill: "Web Developer",
  hobbies: ["Learning", "reading"],
  get headlines() {
    return `${this.name}  is ${this.skill} and his main hobbies are ${this.hobbies[0]} and ${this.hobbies[1]}`;
  },
  set newHobby(val) {
    this.hobbies.unshift(val);
  },
  get newHobby() {
    return this.hobbies[0];
  },
};
person.newHobby = "Druming";
console.log(person.headlines);
class Person {
  constructor(name) {
    this.name = name;
  }

  set name(value) {
    this._name = value;
  }

  get name() {
    return this._name.toUpperCaser();
  }
}

const nico = new Person("nico");
// console.log(nico);

console.log(nico);

let user = {
  get name() {
    return this._name;
  },

  set name(value) {
    if (value.length < 4) {
      alert("Name is too short, need at least 4 characters");
      return;
    }
    this._name = value;
  }
};

user.name = "Pete";
alert(user.name); // Pete

user.name = ""; // Name is too short...


function User(name, birthday) {
  this.name = name;
  this.birthday = birthday;

  // age is calculated from the current date and birthday
  Object.defineProperty(this, "age", {
    get() {
      let todayYear = new Date().getFullYear();
      return todayYear - this.birthday.getFullYear();
    }
  });
}

let john = new User("John", new Date(1992, 6, 1));

alert( john.birthday ); // birthday is available
alert( john.age );      // ...as well as the age
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  intro() {
    return `Hi my name is ${this.name}, I Am ${this.age} years old`;
  }
}

const nico = new Person("nico", 34);
console.log(nico.intro());
console.log(Person.prototype);
console.log("-----");
console.log(typeof Person);
console.log("-----");
console.log(Person === Person.prototype.constructor);
console.log("-----");
console.log(Person.prototype.sayHi);
console.log("-----");
console.log(Object.getOwnPropertyNames(Person.prototype));
// Class Expression
// let User = class {
//   sayHi() {
//     console.log("high");
//   }
// };
let User = class Myclass {
  sayHi() {
    console.log("Hi");
  }
};

new User().sayHi();
// console.log(Myclass); Erro is not a variable you cant call it

//make classes dynamically “on-demand”
function makeClass(phrase) {
  return class {
    sayPhrase() {
      console.log(phrase);
    }
  };
}

const nico = makeClass("Gordo Puto");

new nico().sayPhrase();
class User {
  constructor(name) {
    this.name = name;
  }
  get name() {
    return ` Hi ${this._name}`;
  }

  set name(value) {
    if (value.length < 4) {
      return `This name is is too short`;
    }
    this._name = value;
  }
}
let user = new User("nico");
console.log(user.name);

remember that you have to make somtg=hing